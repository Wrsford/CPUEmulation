; Start minasm WiiU playground
//int 0xdeadface
// Setup interrupts
@func pushPC
int 0
@end pushPC

@func popToRAM
int 1
@end popToRAM

@func pushRAM
int 2
@end pushRAM

// Callstack state fucks up data & backup reg functions
;@func popData
;    int 3
;@end popData

;@func pushData
;    int 4
;@end pushData

;@func popBkup
;    int 5
;@end popBkup

;@func pushBkup
;    int 6
;@end pushBkup

@func printc
int 7
@end printc

@func printSpace
int 8
@end printSpace

@func newLine
int 9
@end newLine

@func debugger
int 0xdeadface
@end debugger

@func swapStack ; Swaps the last 2 arguments in the stack
    int 3
    int 5
    int 4
    int 6
@end swapStack

@func add ; adds two numbers
    push 0
    @call swapStack
    sub
    sub
@end add

@func return
    ret
@end return

@func digit2char
    @call add '0'
@end digit2char

@func forLoop // [[data], addressToCall, count]
    int 3 // pop count to data
    int 5 // pop address to bkup
    int 4 // push count
    @pushfunc return
    @call pushRAM
    jlq 0 // return if 0 or less

    int 6 // push addr
    call // call addr
    int 6 // push address back onto stack for next call
    int 4 // push count
    sub 1
    @jump forLoop
@end forLoop

@func strlen
    int 4
    @call swapStack
    @pushfunc return
    @call pushRAM
    //@call debugger
    jlq 0 // return if 0 or less
    pop
    int 4
    @call add 1
    int 3
    @jump strlen
@end strlen

@func str2ram // [[string], dest pointer]
    int 3 // pop pointer to data
    int 5 // char -> bkup
    int 6 // put it back
    int 4 // push it back

    @call popToRAM // write char to ram
    int 4 // push pointer back
    @call add 1 // inc pointer
    int 3 // pop increased pointer to data
    int 6 // char -> stack
    @pushfunc return
    @call pushRAM

    jlq 0 // return if null term

    int 4 // push pointer + 1
    @jump str2ram
@end str2ram

@func ramstrlen // [string pointer]
    // bkup will contain the len
    int 3 // ptr -> data
    int 4 // ptr -> stack
    @call pushRAM // char -> stack
    int 6 // len -> stack
    @call swapStack // [len, char]
    @pushfunc return
    @call pushRAM
    jlq 0 // return if null term
    int 4 // ptr -> stack
    @call add 1 // ptr++
    int 3 // ptr+1 -> data
    @call add 1 // len ++
    int 5 // len++ -> bkup
    int 4 // ptr+1 -> stack
    @jump ramstrlen
@end ramstrlen

@func ram2str_main // [start]
    int 3 // ptr -> data
    int 4 // ptr -> stack
    @call pushRAM // char -> stack
    int 4 // ptr -> stack
    sub 1 // ptr--
@end ram2str_main

@func ram2str // [string pointer]
    int 3 // ptr -> data
    int 4 // ptr -> stack
    @call ramstrlen
    int 5 // len -> bkup
    int 4 // ptr -> stack
    int 6 // len -> stack
    @call add // strlen + orig ptr
    @pushfunc ram2str_main
    @call pushRAM
    int 6 // len -> stack
    @call add 1 // inc len by one to account for copying the null term character
    @call forLoop // read chars [end of str ptr, ram2str_main, strlen]
    pop
@end ram2str

@func printStringPtr //[string_pointer]
    int 3 // pop ptr to data
    int 4 // put it back
    @call ram2str // get the string
    @call strlen // get len
    int 5 // len -> bkup
    int 4 // ptr -> stack
    @call ram2str // string -> stack
    @pushfunc printc
    @call pushRAM // printc -> stack
    int 6 // len -> stack
    @call forLoop // [[str], printc, len]
    pop // pop off the null term
@end printStringPtr

@func print //[[string]]
    @call str2ram 0x8080
    @call printStringPtr 0x8080
@end print

@func println
    @call print
    @call newLine
@end println

@func wiiuGetInput // Triggers interrupt for wiiu gamepad input
    int 0x4118
@end wiiuGetInput

@func wiiuSetInputFunction // sets the location to call when wii u input comes in
    int 0x4117
@end wiiuSetInputFunction

@func printBtn
    int 3
    @call print "[Info: "

    push 'A'
    int 4
    sub 0x8000
    @pushfunc printc
    @call pushRAM
    jlq 0
    @call printc ']'
    @call newLine
@end printBtn

@func exit // Kill execution
    brk
@end exit

@func exitIfHome
    int 3
    int 4
    sub 0x0001 // Check the lowest first
    @pushfunc return
    @call pushRAM
    jlq 0

    int 4
    sub 0x0002
    @pushfunc exit
    @call pushRAM
    jlq 0
@end exitIfHome


@func confirmExit
    @call println "Press HOME to exit."
    @call wiiuGetInput
    @call exitIfHome
@end confirmExit

@func confirmExitIfHome
    int 3
    int 4

    sub 0x0001 // Check the lowest first
    @pushfunc return
    @call pushRAM
    jlq 0

    int 4
    sub 0x0002
    @pushfunc confirmExit
    @call pushRAM
    jlq 0
@end confirmExitIfHome

@func gotInput // [btn code]
    //@call printBtn // Fair try...
    @call confirmExitIfHome
    @call println "Button pressed..."
@end gotInput

@func sleep // []
    int 0x4119
@end sleep

; Now we test
@func _main // the entrypoint
    @call println "Minasm is now running. Press any button to continue..."
    @call wiiuGetInput
    pop // pop the input from the stack, aren't gonna use it rn
    @pushfunc gotInput
    @call pushRAM
    @call wiiuSetInputFunction
    @call println "Input interrupts are hooked up now. Doing a long forloop."
    @pushfunc sleep
    @call pushRAM
    @call forLoop 0x500
    @call confirmExit
@end _main


@call _main
brk // kill exec

; End minasm WiiU playground
